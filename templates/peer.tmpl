# {{ .Peer.Name }} AS{{ .Peer.Asn }} last operation at {{ .Peer.QueryTime }}

define AS{{ .Peer.Asn }}_{{ .Peer.Name }}_MAXPFX_v4 = {{ .Peer.ImportLimit4 }};
define AS{{ .Peer.Asn }}_{{ .Peer.Name }}_MAXPFX_v6 = {{ .Peer.ImportLimit6 }};

{{ if or (eq .Peer.Type "peer") (eq .Peer.Type "downstream") -}}
{{ if NotEmpty .Peer.PrefixSet4 }}
define AS{{ .Peer.Asn }}_{{ .Peer.Name }}_PFX_v4 = [
{{ BirdSet .Peer.PrefixSet4 }}
];
{{ end }}

{{ if NotEmpty .Peer.PrefixSet6 }}
define AS{{ .Peer.Asn }}_{{ .Peer.Name }}_PFX_v6 = [
{{ BirdSet .Peer.PrefixSet6 }}
];
{{ end }}
{{ end -}}

{{ $peer := .Peer -}}
{{- $global := .Config -}}
{{- $af := "" -}}
{{- range $i, $neighbor := .Peer.NeighborIps -}}
{{- if Contains $neighbor ":" -}}
{{- $af = "6" }}
{{- else -}}
{{- $af = "4" }}
{{- end -}}
{{ if CheckProtocol $peer.PrefixSet4 $peer.PrefixSet6 $af $peer.Type }}
protocol bgp {{ $peer.Name }}v{{ $af }}_{{ $i }} {
    local as ASN;
    neighbor {{ $neighbor }} as {{ $peer.Asn }}{{ if $peer.Port }} port {{ $peer.Port }}{{ end }};
    description "AS{{ $peer.Asn }} {{ $peer.Name }}";
    {{ if $peer.Disabled }}disabled;{{ end }}
    {{- if $peer.Passive }}passive;{{ end }}
    {{- if $peer.Multihop }}multihop 255;{{ end }}
    {{- if $peer.Password }}password "{{ $peer.Password }}";{{ end }}
    {{- if $peer.RsClient }}rs client;{{ end }}
    {{- if $peer.RrClient }}rr client;{{ end }}
    {{- if $peer.Bfd }}bfd on;{{ end }}
    {{ $peer.SessionGlobal }}
    ipv{{ $af }} {
        {{ if $global.KeepFiltered -}}
        import keep filtered;
        {{ end -}}
        import limit AS{{ $peer.Asn }}_{{ $peer.Name }}_MAXPFX_v{{ $af }} action disable;
        {{ if eq $peer.Asn $global.Asn }}next hop self;{{ end }}
        import filter {
            {{ if not $peer.SkipFilter }}reject_bogons();{{ end }}
            {{ if $peer.EnforceFirstAs }}enforce_first_as({{ $peer.Asn }});{{ end }}
            {{ if $peer.EnforcePeerNexthop }}enforce_peer_nexthop({{ $neighbor }});{{ end }}
            strip_info_communities();
            bgp_local_pref = {{ $peer.LocalPref }};
            honor_graceful_shutdown();
            {{ $peer.PreImport }}
            {{ if not (eq $peer.Prepends 0) }}
            {{- range $i := Iterate $peer.Prepends }}
            bgp_path.prepend(ASN);
            {{ end }}
            {{ end }}
            {{- if eq $peer.Type "upstream" -}}
            bgp_large_community.add((ASN,0,101)); # Learned from upstream
            {{ if $peer.AllowBlackholes }}
            process_blackholes();
            {{ end }}
            accept;
            {{- else if eq $peer.Type "peer" -}}
            reject_transit_paths();
            if (net ~ AS{{ $peer.Asn }}_{{ $peer.Name }}_PFX_v{{ $af }}) then {
                bgp_large_community.add((ASN,0,102)); # Learned from peer
                {{ if $peer.AllowBlackholes }}
                process_blackholes();
                {{ end }}
                accept;
            }
            reject;
            {{- else if eq $peer.Type "downstream" -}}
            reject_transit_paths();
            if (net ~ AS{{ $peer.Asn }}_{{ $peer.Name }}_PFX_v{{ $af }}) then {
                bgp_large_community.add((ASN,0,103)); # Learned from downstream
                {{ if $peer.AllowBlackholes }}
                process_blackholes();
                {{ end }}
                accept;

            {{- else if eq $peer.Type "core" -}}
                bgp_large_community.add((ASN,0,10)); # Learned from Core Routers
                accept;

            {{- else if eq $peer.Type "import-valid" -}}
            bgp_large_community.add((ASN,0,102)); # Learned from peer
            {{ if $peer.AllowBlackholes }}
            process_blackholes();
            {{ end }}
            accept;
            {{- end }}
        };

        export filter {
            {{ $peer.PreExport }}

            {{- range $i, $community := $peer.Communities -}}
            bgp_community.add(({{ $community }}));
            {{ end }}

            {{- range $i, $community := $peer.LargeCommunities -}}
            bgp_large_community.add(({{ $community }}));
            {{ end }}

            {{ if $peer.StripPrivateASNs }}
            bgp_path.delete([64512..65534, 4200000000..4294967294]); # Strip private ASNs
            {{ end }}

            {{ if or $global.OriginSet4 $global.OriginSet6 -}}
            accept_local(); # Originated
            process_prepends();
            {{ end -}}

            {{ if not $peer.NoSpecifics -}}
            {{ if eq $peer.Type "upstream" -}}
            if ((ASN,1,200) ~ bgp_large_community) then reject; # Don't export to upstreams
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Downstream
            {{ else if or (eq $peer.Type "peer") (eq $peer.Type "import-valid") -}}
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Downstream
            {{ else if eq $peer.Type "downstream" -}}
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Downstream
            if ((ASN,0,102) ~ bgp_large_community) then accept; # Peer
            if ((ASN,0,101) ~ bgp_large_community) then accept; # Upstream
            {{ else if eq $peer.Type "core" -}}
            if ((ASN,0,10) ~ bgp_large_community) then accept;  # Core
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Downstream
            if ((ASN,0,102) ~ bgp_large_community) then accept; # Peer
            if ((ASN,0,101) ~ bgp_large_community) then accept; # Upstream
            {{ end -}}
            {{ end -}}

            {{ if $peer.ExportDefault -}}
            if (proto = "default{{ $af }}") then accept; # Send default route
            {{ end }}
            reject;
        };
    };
}

{{ end }}
{{ end }}
